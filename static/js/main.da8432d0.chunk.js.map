{"version":3,"sources":["features/page/page.module.css","features/elements/elements.module.css","features/page/page-slice.js","features/page/page.js","features/elements/elements-slice.js","features/elements/elements.js","app.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","pageSlice","createSlice","name","initialState","width","height","selectPage","state","page","Page","props","children","useSelector","className","styles","style","elementsSlice","reducers","updatePosition","payload","item","find","id","x","y","actions","selectElements","elements","Rectangle","React","memo","backgroundColor","DraggableRectangle","nodeRef","useRef","dispatch","useDispatch","handleDraggableStop","useCallback","_","node","Number","dataset","bounds","defaultPosition","onStop","ref","data-id","Elements","map","element","key","App","random","min","max","Math","floor","pad","num","size","s","substr","length","generateColor","r","toString","g","b","generatedColor","initialPageState","initialElementsState","concat","Array","from","i","generateElement","store","configureStore","reducer","preloadedState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da8432d0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"page_page__2koG9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"draggable-rectangle\":\"elements_draggable-rectangle__1IpQo\"};","import { createSlice } from '@reduxjs/toolkit';\n\nexport const pageSlice = createSlice({\n  name: 'page',\n  initialState: {\n    width: 400,\n    height: 400,\n  },\n});\n\nexport const selectPage = (state) => state.page;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectPage } from './page-slice';\nimport styles from './page.module.css';\n\nexport function Page(props) {\n  const { children } = props;\n  const page = useSelector(selectPage);\n\n  return (\n    <div\n      className={styles.page}\n      style={{ width: `${page.width}px`, height: `${page.height}px` }}\n    >\n      {children}\n    </div>\n  );\n}\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const elementsSlice = createSlice({\n  name: 'elements',\n  initialState: [],\n  reducers: {\n    updatePosition: (state, { payload }) => {\n      const item = state.find((item) => item.id === payload.id);\n\n      if (item) {\n        item.x = payload.x;\n        item.y = payload.y;\n      }\n    },\n  },\n});\n\nexport const { updatePosition } = elementsSlice.actions;\n\nexport const selectElements = (state) => state.elements;\n","import React from 'react';\nimport Draggable from 'react-draggable';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styles from './elements.module.css';\nimport { selectElements, updatePosition } from './elements-slice';\n\nconst Rectangle = React.memo((props) => {\n  const { width, height, backgroundColor } = props;\n  return <div style={{ width, height, backgroundColor }} />;\n});\n\nconst DraggableRectangle = React.memo((props) => {\n  const { id, width, height, backgroundColor, x, y } = props;\n  const nodeRef = React.useRef(null);\n  const dispatch = useDispatch();\n\n  const handleDraggableStop = React.useCallback(\n    (_, { node, x, y }) => {\n      dispatch(updatePosition({ id: Number(node.dataset.id), x, y }));\n    },\n    [dispatch],\n  );\n\n  return (\n    <Draggable\n      bounds={'parent'}\n      defaultPosition={{ x, y }}\n      nodeRef={nodeRef}\n      onStop={handleDraggableStop}\n    >\n      <div className={styles['draggable-rectangle']} ref={nodeRef} data-id={id}>\n        <Rectangle\n          width={width}\n          height={height}\n          backgroundColor={backgroundColor}\n        />\n      </div>\n    </Draggable>\n  );\n});\n\nexport const Elements = () => {\n  const elements = useSelector(selectElements);\n\n  return elements.map((element) => {\n    return (\n      <DraggableRectangle\n        key={element.id}\n        id={element.id}\n        width={element.width}\n        height={element.height}\n        x={element.x}\n        y={element.y}\n        backgroundColor={element.backgroundColor}\n      />\n    );\n  });\n};\n","import React from 'react';\nimport { Page } from './features/page';\nimport { Elements } from './features/elements';\n\nexport function App() {\n  return (\n    <Page>\n      <Elements />\n    </Page>\n  );\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport { pageSlice } from '../features/page';\nimport { elementsSlice } from '../features/elements';\n\nconst random = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst pad = (num, size) => {\n  const s = '000000000' + num;\n  return s.substr(s.length - size);\n};\n\nconst generateColor = () => {\n  const r = pad(random(0, 255).toString(16), 2);\n  const g = pad(random(0, 255).toString(16), 2);\n  const b = pad(random(0, 255).toString(16), 2);\n\n  const generatedColor = `#${r}${g}${b}`;\n  return generatedColor === '#d8d8d8' ? generateColor() : generatedColor;\n};\n\nconst initialPageState = {\n  width: 400,\n  height: 400,\n};\n\nconst generateElement = (id) => {\n  const minSize = 40;\n  const maxSize = 100;\n\n  const width = random(minSize, maxSize);\n  const height = random(minSize, maxSize);\n\n  return {\n    id,\n    width,\n    height,\n    backgroundColor: generateColor(),\n    x: random(0, initialPageState.width - width),\n    y: random(0, initialPageState.height - height),\n  };\n};\n\nconst initialElementsState = [\n  {\n    id: 0,\n    width: 100,\n    height: 100,\n    x: 10,\n    y: 10,\n    backgroundColor: '#5FD0E4',\n  },\n  {\n    id: 1,\n    width: 40,\n    height: 100,\n    x: 100,\n    y: 200,\n    backgroundColor: '#9E5FE4',\n  },\n].concat(Array.from({ length: 4000 }, (_, i) => generateElement(i + 2)));\n\nexport const store = configureStore({\n  reducer: {\n    page: pageSlice.reducer,\n    elements: elementsSlice.reducer,\n  },\n  preloadedState: {\n    page: initialPageState,\n    elements: initialElementsState,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './app';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}